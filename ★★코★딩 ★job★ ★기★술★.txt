★★코★딩 ★job★ ★기★술★
int digit = c - '0'		=> 문자를 정수로 변환.
sleep(int time) : time의 초단위만큼 대기시킴.
★★★ 속성:	 unordered_map (빠른 처리 + 비정렬) ↔ map (정렬 + 안정성)
구조:	해시 테이블
시간 복잡도:	삽입, 검색 평균 O(1)
특징:	키 중복 없음, 정렬 안됨
유용한 경우:	"이 값이 몇 번 나왔지?" 같은 빈도 세기 문제에서 매우 강력, 숫자가 몇 번 나왔는지 카운팅하는 문제에 강력
쓰는 방법 : unordered<map<int,int>> freq;

★★★ map
정렬 유지:	항상 키 기준으로 오름차순 정렬되어 있음
내부 구조:	Red-Black Tree (이진 탐색 트리) 사용
시간 복잡도:	삽입, 삭제, 탐색 모두 O(log n)
자동 초기화:	m[key]로 접근하면 없는 키는 기본값(0) 으로 초기화됨
중복 키:	❌ 허용하지 않음 (항상 고유 key만 존재)
순서대로 출력 : map<int,int> m;
for (auto p : m) {
        cout << p.first << ": " << p.second << '\n';	// m[p] ≠ 0인 작은 p키 값부터 출력
    }

sort() -> 오름차순으로 원소 정렬, 값이 다양하고 범위가 클 때 사용 ( 범위 넓어서 기본 정렬에 비효율)
stable_sort() -> 원래 순서를 보장하는 정렬 (순서 유지)
	접근 : stable_sort(벡터.begin(), 벡터.end(), [](const pair<int, string>& a, const pair<int, string> & b) { return a.first < b.first});	// pair 템플릿으로 선언된 벡터 비교를 할 경우
	※ 3번째 파라미터는 무조건 람다식으로 작성해야 한다!
pair :  서로 다른 두 개의 값을 하나로 묶는 자료형 (#include <utility>), 원하는 만큼 여러 겹의 pair 사용 가능
	타입 : pair<타입1, 타입2> 이름;
	초기값 : make_pair(값1, 값2) 또는 {값1, 값2}
	접근 : pair.first, pair.second
	※ vector<pair<int, string>> v; 로도 가능!

※ 카운팅 정렬 : 값이 작고 범위가 작을 때 사용 (빠르고 메모리 절약)
const int MAX = 10001;
int countArr[MAX] = {0};
int main(){
cin >> x;
++countArr[x];

※ greater 템플릿과 less 템플릿 (주로 sort()나 priority_queue 에 쓰임)
	greater<T>() : 작은 값이 먼저 오도록 정렬 (내림차순 정렬)
	less<T>() : 오름차순

※ priority_queue<int, vector<int>, greater<int>> pq;	-> 가장 큰 수들부터 정렬하는 큐
	pq.push(x);
	pq.pop()	->	가장 작은 수부터 제거
	pq.top()	->	마지막번째 큰 수

for(int i = 1; i < MAX; ++i){
	while(countArr[i]--){
		cout << i << '\n';
	}
}

DFS (Deptg-First Search, 깊이 우선 탐색) : 가능한 깊게 탐색, 더 이상 갈 곳 없으면 백트래킹을 통해 이전 노드로 돌아가 다른 경로 탐색하는 방식, 스택을 이용하여 구현, 깊이가 깊은 노드를 우선적으로 탐색
BFS (Breadth-First Search, 너비 우선 탐색) : 방문할 수 있는 현재 노드의 모든 이웃 노드를 먼저 탐색 후 그 다음 레벨 노드들을 탐색하는 방식, 큐를 이용한 구현, 가까운 노드부터 차례대로 탐색

#include <vector>, <algorithm>,  <queue>
vector<int> graph[1001]; // 그래프를 인접 리스트로 표현
bool visited_dfs[1001];   // DFS 방문 기록
bool visited_bfs[1001];   // BFS 방문 기록

// DFS 함수
void dfs(int v) {
    visited_dfs[v] = true;
    cout << v << " ";
    
    // 연결된 정점들을 작은 번호부터 방문
    for (int i = 0; i < graph[v].size(); i++) {
        int next = graph[v][i];
        if (!visited_dfs[next]) {
            dfs(next);
        }
    }
}

// BFS 함수
void bfs(int v) {
    queue<int> q;
    visited_bfs[v] = true;
    q.push(v);
    
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";
        
        // 연결된 정점들을 작은 번호부터 방문
        for (int i = 0; i < graph[node].size(); i++) {
            int next = graph[node][i];
            if (!visited_bfs[next]) {
                visited_bfs[next] = true;
                q.push(next);
            }
        }
    }
}



1. 최대공약수 구하기
int gcd(int a, int b){
	while (b != 0){
		int temp = b;	// temp = 12, 10, 2	//temp = 15
		b = a % b;		// b = 10, 2, 0		//b = 0
		a = temp;		// a = 12, 10, 2		// a = 15
	}
	return a;
}


2. 두 수의 최소공배수 구하기
int lcm(int a, int b){
	return a * b / gcd(a, b);		// 10 * 12 / 2 = 60	
}


3. 세 개의 수에 대한 최소공배수 구하기
int lcm_of_three(int a, int b, int c){		//c = 15
	return lcm(lcm(a,b),c);		// 60 * 15 / 15 = 60
}


4. ★★이진 탐색
int binarySearch(int arr[], int size, int target) {
    int left = 0;             // 왼쪽 인덱스
    int right = size - 1;     // 오른쪽 인덱스	// size = 8, right = 7

    while (left <= right) {
        int mid = left + (right - left) / 2; // 중앙 인덱스		// mid = 3	->(left = 4)5 -> (left = 6) 6

        // 중앙값이 target이면 그 인덱스를 반환
        if (arr[mid] == target) {
            return mid;		// mid = 3 ->(left = 4)5 -> (left = 6) 6
        }

        // target이 중앙값보다 작으면 오른쪽 절반을 버리고 왼쪽 절반을 탐색
        if (arr[mid] > target) {
            right = mid - 1;	// right = 2 -> (left = 4)4 -> (left=6) 5
        }
        // target이 중앙값보다 크면 왼쪽 절반을 버리고 오른쪽 절반을 탐색
        else {
            left = mid + 1;	// left = 4 -> 6 -> 7
        }
    }

    return -1; // 찾지 못한 경우
}

4-1. 서로 다른 원소 2개의 합을 찾는 이진 탐색
cin >> x;
int left = 0, right = n - 1;
while (left < right) {
    int sum = d[left] + d[right];	// 서로 다른 두 원소의 합을 구함.

    if (sum == x) {		// 두 원소의 합이 x와 같으면 count 증가
        count++;
        left++;
        right--;
    }
    else if (sum < x) {	// 벡터는 sort()함수에 의해 정렬되었다고 가정했을 때 x값보다 낮으면 젤 왼쪽 원소 인덱스 이동
        left++;
    }
    else { 	// x보다 높으면 젤 오른쪽 원소 인덱스 이동
        right--;
    }
}

cout << count << '\n';


5. 문자열 정수 반환
string A, B;		// A = 123, B = 45
cin >> A >> B;
long long result = 0;

for(char a : A){	A = {1, 2, 3} 
	for(char b : B){	B = {4, 5}
		result += (a - '0') * (b - '0');	// a = 1, b= 4, 5 -> a = 2, b = 4, 5 -> a = 3, b = 4, 5
	}
}
cout << result;	// result = 9 + 18 + 27 = 54


6. N에서 가장 큰 2의 거듭제곱 약수 찾기
long long f(long long N) {
    return N & (-N);	ex) N = 12 -> 1100(2진수 12), -N -> 0100 (2의 보수) , and 연산 사용 -> 0100 (2진수 4)
}

7. 출력 소수점 자리 정하기
int main(){
	cout << fixed;
	cout.precision(1);		// 소수점 이하 첫째 자리 까지 출력함

8. 문자열로부터 키받기
#include <conio.h>
#include <window.h>
int GetKey() {
    if (_kbhit()) { // 키 입력이 있을 때만
        int ch = _getch();
        if (ch == 0 || ch == 224)
            ch = 256 + _getch();
        return ch;
    }
    return -1; // 키 입력이 없을 경우
}

9. 명령 도스 화면의 좌표 초기화
#include <conio.h>
#include <window.h>
void GotoXY(int x, int y) {
    COORD pos = { x, y };
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}

10. ★숫자 값을 문자열로 변환 (#include <string>필요) -> string d = to_string(multi);
11. 문자열 입력할 때 콤마(,) 포함하기 (#include <string>필요)
    int T;
    cin >> T;        // 테스트 케이스 개수 입력
    cin.ignore();    // 개행 문자(\n) 제거

    while (T--) {    // T번 반복
        string input;
        getline(cin, input);  // 한 줄 입력받기 (예: "1,1")

        int commaPos = input.find(',');  // ',' 위치 찾기
        int A = stoi(input.substr(0, commaPos));      // ',' 앞부분 숫자로 변환
        int B = stoi(input.substr(commaPos + 1));  

※ 배열의 수가 1만을 넘길 때 vector 배열로 동적할당하는 것이 가장 효율적임!
12. 각 자리의 빈도수 구하기
	int freq[101], maxcount = 0;
	for(int i = 0; i<10; i++) {
		cin >> n;
		freq[n]++;
		if(freq[n] > maxcount){
			maxcount = freq[n];
			mode = n;
		}
13. 문자열 추출하여 이어붙이기	string name.substr(first, end)
	string name;
	int p;
	cout << name.substr(0, p-1) + name.substr(p) << '\n';	-> 1 ~ p-1번째까지의 문자열 출력 + p번째부터 끝까지 문자열 출력
	ex) p = 4, name = "MISSPELL 이면 p의 위치는 4번째 "S"를 제외한 "MIS" + "PELL"로 출력.

14. 버블정렬 (내림차순으로 정렬)
for (int x = 0; x < 9; x++) {
    for (int y = 0; y < 9 - x; y++) {
        if (d[y] < d[y + 1]) {  // 큰 수를 앞으로
            int temp = d[y];
            d[y] = d[y + 1];
            d[y + 1] = temp;
        }
    }
}

15. 입력된 숫자가 배열에 들어있는 숫자인지 확인하기
#include <vector>
#include <algorithm>
sort(d1.begin(), d1.end());
for (int i = 0; i < d2.size(); i++) {
    if (binary_search(d1.begin(), d1.end(), d2[i]))
        cout << 1 << '\n';	// 존재하면 1 출력
    else
        cout << 0 << '\n';	// 없으면 0 출력
}
※ 시간 복잡도를 줄이기 위해서 정렬(sort()함수)를 해주면 좋음!
16. 충분히 큰 값으로 초기화 	->	#include<climits>	int min_diff = INT_MAX;
17. 입출력 속도 최적화 -> ios::sync_with_stdio(false); 	cin.tie(NULL);
18. ★★★ 정렬된 배열에서 이진탐색으로 특정 값의 범위를 찾을 때
	lower_bound(begin, end, value) 	-> 처음으로 value가 등장하는 인덱스 찾기
	upper_bound(Begin, end, value)	-> value의 마지막 인덱스 다음 위치(value보다 큰 값이 나오는 위치)
	int count = upper_bound() - lower_bound()	-> value의 개수

19. 2차원 벡터 정의 :	vector<vector<int>> v(행, vector<int>(열));
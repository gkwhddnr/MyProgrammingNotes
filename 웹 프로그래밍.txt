웹 프로그래밍 노트

- 복습할 내용을 마크"만" 하라.
- 이해는 나중에, 평가를 먼저 하라.
- 어떤 기능을 하는지"만" 알아라.
- 주로 영어의 약자를 잘 출제한다.
- "W3SCHooL" 검색



※ 개발 환경
! + tab -> 간단한 VS CODE 틀 만들기
h1 + tab -> <헤더파일>/<헤더파일>
문서서식
ctrl + x -> 한 라인 제거
ctrl + . -> 설정
ctrl + s -> 코드 내용 정리
F2 -> 이름 바꾸기

Ⅰ. 기초사항
인터넷 - 전 세계의 컴퓨터가 연결된 ★네트워크
WWW(World Wide Web) - 인터넷의 네트워크 사용하는 ★서비스 중 하나 (HTML, URL, HTTP)
HTML(Hypertext Markup Language) - 하이퍼텍스트 마크업 언어, 웹페이지용 마크업 언어, 태그와 요소 (element)로 이뤄져 있음.
HTTP(Hypertext Transfer Protocol) - 하이퍼텍스트 전송 ★프로토콜, 웹 서버에서 문서를 가져올 수 있음.
하이퍼텍스트 - 하이퍼링크를 누르면 다른 문서로 즉시 이동할 수 있는 텍스트, 특징은 연상기법
URL(Uniform Resource Locator) -> 프로토콜//도메인(호스트이름):포트번호(무조건 적어야함) / 경로 / 파일 이름, 인터넷에 있는 자원의 위치를 나타내는 규약.
※ URL에 %가 들어간 이유 : 특정 문자를 포함할 때 인코딩(encoding)되어야 함!
Port - 하나 서버에 다수 서버프로그램 동시 수행
HTML 4.01 -> XHTML
DOM (Document Object Model) : 웹페이지 전체
CSS(Cascading Style Sheets) -> 계단식 스타일 시트

ⅰ. 클라이언트와 서버
※ 일반 프로그래밍과 네트워크 프로그래밍의 차이점? 
-> 함수 호출과 패킷 전송이 다름.
∴ 대부분의 패킷은 텍스트 형태로 전송

★ 텍스트로 작성하는 이유?
-> 컴퓨터마다 cpu, os, language가 달라 전송하는 메모리 값이 다 다르고, 인식하는 메모리의 한계도 있기에 표준화하기 위해 텍스트로 작성!
ex) 4byte 메모리 전송 -> but 전송한 곳에는 2byte 메모리밖에 인식 안됨.
	=> 호환 문제 발생

		프론트엔드			|		백엔드
사용자 	-(HTTP Request)-> 	|	웹 서버 <-(SQL쿼리)-> 데이터베이스
	  	<-(HTTP Response)-	|

ⅱ. 프록시 서버(Proxy Server, 대리 서버)
	- 클라이언트와 서버 사이에서 데이터 전달하는 서버
	- 설치 목적 : 인터넷 속도 향상!
클라이언트 <--> 프록시 <--> 프록시 <--> 서버

※ 기능
캐싱(공개 or 비공개), 필터링, 로드 밸런싱(여러 서버가 다른 요청을 처리하도록 허용), 인증

ⅲ. ★★XML (Extensible Markup Language)
	- 문서 구조 설명 양식
	- 데이터 저장 및 전송을 위한 다양한 양식의 마크업 언어

※ 적용 사례
- 문서 구조 표현 (특정 데이터 형식 표현 활용, 개방형문서 형식, 데이터 교환 형식)
- 데이터 저장 및 전송 (설정 or 구성 파일 형식 사용)

※ 역사 : SGML (Standard Generalized Markup Language) -> XML -> JSON (Javascript Object Notion) (XML 단순화시킨 언어)

ⅳ. html5의 개발 원칙
- 규격은 HTML, CSS, DOM, JavaScript 기술에 기반을 둠,
- Applet, 플래시, ActiveX 같은 외부 플러그인 최소화
- 오류 처리 향상
- 독립적 설계
- 마크업 증가
- 대중들에게 개발 과정을 투명하게 공개되어야 함.

※ HTML5의 신기능
- 오프라인 웹 애플리케이션 (네트워크 연결 x 실행 가능)
 -> 웹 SQL 데이터베이스, 웹 스토리지, 파일 API 지원
- 드래그 앤 드롭 (drag-and-drop)
- 위치 정보 제공 (Geolocation)
- 웹소켓 API 제공



Ⅱ. HTML 기본 요소
DTD(Document Type Definition) : 문서 타입 정의
- HTML 문서는 헤드와 바디로 구성됨.
<!DOCTYPE> -> HTML의 종류와 버전 지정
주석 : ctrl + / (단축키)		<!-- (주석) --> ->원래 주석임.
shift + /  : 주석 취소
<head> : 메타데이터를 담는 컨테이너
meta data : 데이터에 대한 데이터, 데이터의 구조
- 유니코드는 utf-8로 씀. (영어는 1byte, 한글은 3byte 표현)
<p> (Paragraphs)태그 -> 문단의 전후 빈 줄 추가
<br> 태그 -> 강제 줄바꿈 태그, line break
<pre> 태그 -> 입력한 그대로 화면에 표시
헤딩 : 웹 페이지 머리기사(헤드라인)
<b> -> 글자크기 굵게, <strong> -> 텍스트 강조 표시 			-> 둘 다 표시되는 것은 똑같지만 쓰임이 다르다.
<hr> -> 수평선, horizontal rule
<a> : 하이퍼링크를 만드는 태그
<tr> (table row) : 테이블의 하나의 행, 표 형태의 데이터 표시에 사용
<td> : 하나의 데이터
<th> (table header) : 테이블의 헤더



ⅰ. 요소
-> 시작 태그와 종료 태그로 이룬 HTML 문서 구성 요소
- 태그는 하나의 타입, 요소는 하나의 값
	ex) { <title> -> 시작 태그, "~" -> 요소 내용(컨텐츠), </title> -> 종료 태그 } -> 요소

※ 주의할 점
- 대소문자 구별 x
- 하나 요소 안에 다른 요소 포함 가능
- 시작 태그와 종료 태그 사이의 연속된 공백은 하나의 공백으로 취급.

ⅱ. 속성
- 요소에 대한 추가적 정보 제공
- 값은 " " 또는 ' ' 로 표시
- class, id(이름), style, title

ⅲ. 리스트
<ol>(Ordered list) : 번호있는 리스트
<ul>(Unordered list) : 리스트 시작, 번호없는 리스트
</ul> : 리스트 종료
<li> ... </li> : 리스트 항목 


div(division, 한 라인을 차지, 블록 요소, 페이지를 논리적인 섹션으로 분리하는데 많이 사용됨.) vs span(한 줄 차지, 인라인 요소, 글자색 변경가능)

ⅳ. 이미지 종류 (<img> 태그 사용)
JPEG : 손실 압축 방식, 복잡하고 많은 색상의 이미지
PNG : 무손실 압축 방실, 디자인이나 로고에 사용, 적은 수의 색상의 이미지
GIf : 256색상 지원, 이미지, 투명 배경 및 애니메이션 지원
icons : Font(구글 폰트 참고), SVG, PNG형식 제공

※ 경로 표시 방법
절대경로 : 다른 웹사이트 페이지
상대경로 : 웹사이트 안의 다른 페이지
내부파일 : 현재 페이지 안의 다른 위치

MP4 - "MPEG-4" 기술, 코덱은 H.264
Ogg - 무료 비디오 압축 형식, THEORA 비디오 압축 기술이라 함.
WEBM - 개방형 고화질 영상 압축 형식 영상 포맷, 코덱은 VP8

ⅴ. MiME(Multipurpose Internet Mail Extensions)의 약자 ★★★
	- 각 데이터 조각 유형 식별을 위해 사용
	- HTTP에서 데이터 보내는 역할
	- 텍스트 타입 x

★★ Audio와 비디오 압축 형식의 visual Code 양식이 다 같음!


Ⅲ. 입력 양식과 시맨틱 태그
ⅰ. iframe (inline frame) : 웹페이지 안에 프레임을 만들고 다른 웹페이지를 표시하고자 할 때 사용
but, 보안 문제로 신뢰성 부족, URL 사용 추천하지 않음
- .html 내부에 .html이 포함 가능

ⅱ. 시맨틱 웹(semantic web)
Syntax : 문법, Sematic : 의미
- 목적 : 인터넷의 데이터를 다양한 기계들이 읽고 이해할 수 있도록 만듦.
※ 시멘틱 요소
- 웹 태그들은 문서의 의미에 대해서 별로 정보 주지 X
- 브라우저에게 요소의 의미나 목적을 알려주는 요소
- <header>, <nav>, <footer>, <section> 등

ⅲ. HTML 입력 방식
Form : 입력 양식
JSP (Java Server Page)
사용자가 데이터 입력 -> 입력양식을 웹서버로 제출 -> 서버 스크립트를 통해 처리하고 응답 페이지 생성 후 사용자에 전달

※ 입력(form) 요소
- 빈드시 서버에서만 사용 x
- 클라이언트 컴퓨터에서만 사용 가능

※ 서버가 아닌 클라이언트에 체크하는게 좋은 이유? 	-> 개발이 쉬워서
action : 서버의 기능 호출
method : 입력 데이터를 서버로 보냄.

ⅳ. GET 방식과 POST 방식
GET방식 : URL 주소뒤에 파라미터를 붙여 데이터 전달하는 방식
"?" 기호 앞 - >URL, "?"기호 뒤 -> 파라미터
※ 단점 : 글자 수 2048로 제한, 비밀 보장 x, 주소만 보면 데이터를 알 수 있음.

POST 방식 : URL 주소에 붙지 않고 HTTP Request 헤더에 포함시켜 전송하는 방식
- 길이 제한 x, 보안 유지

pattern : 허용하는 입력형태를 정규식으로 지정

★★★ ⅴ. 정규식(Regular Expression) : 복잡한 원리 설명하고, 매우 쉽게 처리하는 방법 설명
· 완벽한 정규식 없을 수 있음.
정규(Regular) : "일정 규칙을 따르는", 정규 언어 : 일정 규칙 따르는 언어, 정규식 : 일정 규칙 따르는 식
※ 특징
	- 난이도 높은 코딩 감소 -> 생산성 향상
	- 웹 프로그래밍은 텍스트 처리 작업이 대부분
	- 자바스크립트가 스트링 처리에 최적화

※ 언어의 3요소
	-> 순차, 분기, 반복

★★★ 특정 규칙을 가진 문자열 표현
	. -> 문자 기능, 한개의 어떤 문자와도 일치
	\d -> 숫자 기능, 한개 숫자와 일치
	\w -> 문자와 숫자 기능, 한 개 문자나 숫자와 일치
	\s -> 공백문자 기능, 공백, 탭, 줄 바꿈, 캐리지 리턴 문자와 일치
	^ -> 시작 기능, 패턴 시작 표시
	$ -> 끝 기능, 패턴 끝 표시
	[] -> 문자 종류, 문자 범위 기능, [a-z]는 a부터 z까지 중 하나, [abc]는 a또는 b또는 c.

Lex : 컴파일러 분석
Yacc : 문법 분석


Ⅳ. CSS3 스타일시트 기초
1. Style 개념
스타일 - CSS, 내용 - HTML, 동작 - javascript

2. CSS(Cascading Style Sheets) -> 계단식 스타일 시트
※ 기능 
	- ★★★선택자(selectors)
	- 박스 모델
	- 텍스트 효과
	- 2차원 및 3차원 변환
	- 애니메이션
	- 다중 컬럼 레이아웃
	- 사용자 인터페이스 : 자바스크립트 사용 x, CSS 사용하는 인터렉션

※ CSS 방식이 중요한 이유 
	- 효율성 : 중복 스타일 피하고 코드 간결 유지
	- 상속 : 부모 요소 스타일을 자식 요소가 상속받음
	- 복잡한 사이트 관리 및 모든 페이지들을 동일한 CSS가 공유함.

※ 문법 : p { background-color: yellow; }
	선택자	속성			값


3. ★★★선택자 : HTML 요소 선택 부분
	- JQuery(HTML 표준 코드 간결 표현 라이브러리)에서도 사용
	※ 선택자 종류
		- 타입 선택자, 전체 선택자, 클래스 선택자, 아이디 선택자, 속성 선택자, 의사 선택자
	ⅰ. 타입(type) 선택자 : HTML 요소 이름 사용	ex) h1 {color: red; } -> 모든 h1요소 선택
	ⅱ. 전체(universal) 선택자 : 페이지 안의 모든 요소 선택, "*" 사용
	ⅲ. 아이디(id) 선택자 : 특정 요소 선택, 하나의 요소만 변경하고 싶을 때 사용, "#" 사용
	ⅳ. 클래스 선택자 : 클래스가 부여된 요소 선택, "." 사용
	ⅴ. 후손, 자식 선택자 : s1 s2 -> s1 요소에 포함된 s2 요소 선택(후손 관계), 	s1 > s2 -> s1 요소의 직계 자식 요소 s2 선택 (자식 관계)
	ⅵ. ☆☆ 속성(attribute) 선택자 : 모든 HTML 요소 = 객체, 속성과 메소드를 가짐
	ⅶ. 의사 클래스 (Pseudo Class)
		":" -> class, 한 요소의 특정 상태를 정의함.
		"::" -> element, 한 요소의 특정 부위을 꾸밈.
	※ 우선순위 : 아이디 > 클래스 > 태그 > 전체

4. CSS 지정하는 방법
	- 인라인 스타일 시트 : 각각의 HTMP 요소마다 스타일 지정, 2개 이상 선언시 끝에 ; 적어준다.
	- 내/외부 스타일 시트
	※ 스타일 상속 우선순위 : 인라인 스타일 시트 -> 내부 스타일 시트 -> 외부 스타일 시트


5. 색상
	※ 지정
		- 이름으로 표현	ex) "red"
		- 16진수 표현	ex) #FF0000
		- 10진수	ex) RGB(255, 0, 0)
		- 퍼센트	ex) RGB(100%, 0%, 0%)

6. 디자인 방법
	- 일관성 지키기 : 동일 색상, 폰트, 크기, 간격
	- 구별 요소 3개 이상의 효과 주지 말것 : 색상, 크기, 굵기, 위치
	- 어두운 바탕엔 밝은 색상, 밝은 바탕엔 어두운 색상 ( ∵ 가독성 확보)
	- 큰 폰트는 여리게, 작은 폰트는 강하게
	※ 가구 색상 고르기
		5(포인트 칼라) : 25(메인칼라) : 70(베이스칼라)	

7. 폰트 (왠만하면 sans_serif 폰트 씀)
body { 폰트 종류 속성 : 가장 선호하는 폰트}
serif 폰트 : 우아하고 전통적 느낌
sans_serif : 깔끔하고 가독성 좋음
※ 폰트 크기 설정 : font-size
	em : 부모 요소의 글꼴 크기를 기준으로 하는 상대 단위, 강조
	rem : root em 줄임말, 루트 요소의 글꼴크기를 기준으로 한 상대 단위
※ 배경색 변경 : background-color
※ 텍스트 색상 변경 : color



Ⅴ. CSS 박스모델과 응용
	- 박스모델 : HTML 요소들을 박스(사각형) 형태로 그린 것
	- 자주 사용하는 속성들은 암기 필요
	☆ 배경색과 배경 이미지 순서
		margin -> background-color -> background-image -> padding -> content -> border
	- 인라인 요소 : 컨텐츠 크기만큼 자리 차지하는 요소들
	- 인라인 요소 정렬 : text-align
	- 블록 요소 중앙 정렬 : auto
	- 테이블 스타일 복습
	- visibility(가시성) : 어떤 요소를 보이거나 안보이는 것
	※ webkit-transition : 웹킷 기반 브라우저에서 호환성 보장을 위해 사용, 웹킷 접두사(-webkit-)가 추가된 속성은 해당 브라우저에서만 적용되고 다른 브라우저에선 무시



Ⅵ. ★★★CSS 레이아웃과 애니메이션 (☆☆☆☆ div태그와 float속성을 알것!)
★ 레이아웃 : 웹페이지에서 HTML 요소의 위치, 크기를 결정하는 것, 전체 화면 배치 관점과 부분 화면 배치 관점이 있음.

- 블록요소 : 화면의 한 줄 차지
- 인라인 요소 : 한 줄 차례대로 배치, 필요 너비만큼 차지 (위치나 크기 설정 무시)
- 인라인 블록 요소 : 한 줄에 다른 요소들과 함께 배치

1. display 속성
- display:block : 블록 (기본값)
- display:inline : 인라인
- display:none : 없는 것으로 간주, 자리 차지 x
- visibility:hidden : 화면에서 감춰지지만 자리는 차지함.
※ span의 display 속성 기본값 : inline

2. 요소 크기 설정 : width와 height 속성으로 결정
3. ★★위치(positioning) 설정 방법 (기본값 : static (정적 위치))
	- 정적(static) 위치 설정 : 정상적 흐름에 따른 배치
	- 상대(relative) 위치 설정 : 정상적 위치 = 기준점
	- 절대(absolute) 위치 설정 : 컨테이너 원점에서의 절대 위치, 부모요소 기준으로 배치하는 방법
	- 고정(fixed) 위치 설정 : 윈도우 원점 = 기준점

4. ★★★ float : 레이아웃 설정을 위한 목적으로 매우 자주 사용, left, right 등 있는데, 주로 left로 설정함. (일종의 정렬기능)
5. clear 속성 : left, right, both (div 안에도 정의 가능)
	ex) div class = "clearfix"
	☆ content 안에 clear 속성을 집어넣는다!

※ list-style-type: none -> 리스트 앞에 " · " 를 지움
※ z-index -> 요소 스택 순서 지정
※ overflow 속성 : 자식 요소가 부모 요소 범위를 벗어나면 어떻게 처리할건지 지정
	- Hidden : 벗어난 요소 범위를 짜름.
	- scroll : 스크롤바가 나타남.



Ⅶ. 자바 스크립트 기초
※ 자바스크립트(javascript) : 동적 웹페이지 작성을 위한 언어, 웹 표준 프로그래밍 언어
	※ 특징
		- 인터프리터 언어, 구조적 프로그래밍 지원, 동적 타입
		- 객체 지향을 흉내낸 것, 함수형 프로그래밍 지원 (람다식도 지원)

	※ 원리
		- this는 이벤트를 받은 엘리먼트!! ★★
		<script> : script 문으로 변경됨.

- document.write() : document객체의 write() 메소드 호출, 동적 html 파일 콘텐츠 생성 메소드
- DOM (Document Object Model) : 웹페이지 전체
※ <head>와 <body> 차이점
<head> : HTML 파싱(처리) 전에 실행, DOM 요소 접근 실패 가능, 주로 초기설정, config, 외부 라이브러리에 쓰임.
<body> :  HTML 파싱(처리) 후 실행, DOM 접근 안전, 주로 인터렉션, 이벤트 처리, 동적 컨트롤에 적합.
- 주석문 : java와 동일
- NaN : 런타임 오류로 프로그램 종료되는 것을 방지하는 것

1. 템플레이트 리터럴: 백틱

2. ★★★ 객체형 : 사물의 속성과 동작을 묶어서 표현한 기법
javaScript - 딕셔너리(key와 value) 사용하여 객체 지원
변수 선언 : var, let 키워드로 선언하나 권장되는 키워드는 let.

3. ★★★ === 연산자과 !== 연산자
=== 연산자 : 값과 타입이 모두 같으면 참
!== 연산자 : 값이나 타입이 다르면 참

4. prompt() 함수 : 사용자에게 어떤 사항을 알려주고 답변을 입력하는 윈도우를 화면에 띄움, 사용자가 입력한 내용을 문자열로 반환
5. confirm() 함수 : 사용자에게 어떤 사항을 알려주고 확인이나 취소를 요구하는 윈도우 화면을 띄움, 확인 누르면 true, 아니면 false 반환

getElementsByTagName() -> 태그이름을 배열로 반환
getElementsByClassName() -> 클래스이름을 배열로 반환
querySelector -> CSS selector를 파라미터로 받음 (단일)
querySelectorAll -> 여러 개를 찾음 (배열)
※ HTML 문서에 쓰기 : document.write()
요소 접근 : document.getElementById(id)
console.log() -> 자바스크립트 코드 디버깅할 때 많이 사용되는 함수

6. 조건문 종류
if-else문, 연속 if문, switch 문, while문, for문, do/while문, break문, continue문, 무명함수

7. 함수의 속성 : 함수도 객체이므로 속성을 가질 수 있음.
8. ★★ 무명함수(anonymous function) : 한 번만 사용하는 함수 (람다 함수와 유사)
9. ★★ 화살표 함수(arrow function) : 다양한 형태로 자주 사용됨.





-----------------------------------------기말고사------------------------------------
Ⅰ. 자바 스크립트 객체와 배열
객체 : 데이터(객체의 특성값)과 동작 (수행하는 행동), 실제 세계를 흉내낸 것 (≒ 딕셔너리)
속성 : 객체안의 변수
메소드 : 객체 안의 함수
객체 생성 : new 키워드, 객체 멤버 접근 : 점(dot) 연산자 사용
생성자 흉내내기 : 마치 클래스인 것 처럼 흉내내는 딕셔너리를 재활용
객체, 함수 -> 딕셔너리에 의해 만들어짐.
DOM : 브라우저가 HTML 문서 파밍해서 각 요소들을 객체 트리로 정의한 것
BOM (Brower Object Model) : 브라우저 종류나 크기 등 정보 제공하는 객체들
객체 지향 프로그래밍(OOP : object-oriented programming) : 우리가 사는 실제 세계가 객체들로 구성된 것

1. ★Date 객체 : 날짜와 시간 저장한 객체, 많이 사용
	- new Date()
	- getFullYear(), getMonth(), getDate(), getDay() -> 현재 연도, 월, 일, 시, 분 값을 알수있음

	1-1. 2개 날짜 비교 : getTime() 메소드 사용
	1-2. 타임아웃 시간 설정 : setTimeout('datasUntilXmas()',1000) : 1초 지나면 함수 호출 (1000 = 1초)
	
2. ★ string 객체 : 텍스트 저장 및 조작, 많이 사용, ★★★정규식을 잘 사용함!
문자열 객체 생성 : new String();
	※ string 객체 메소드
		- charAt(위치) : 지정된 위치 문자 반환
		- ★★ indexOf(검색 문자열, 위치) : 지정된 숫자 인덱스에서 시작 -> 지정 문자열이 처음 나타내는 인덱스 반환(0부터 시작). 없으면 -1 반환
			ex) let s = "A bad workman"; let n = s.indexOf("workman"); document.write(n);	-> 6

	※ 문자열 매칭 : match() 메소드 사용, 정규식은 /regular expression/ 형식
	※ 문자열 대체 : replace() 메소드 사용
	※ 공백 제거 : trim()

3. ★ 배열 : 많은 값을 한번에 저장하기 위한 장소
	※ 객체 : Array
	※ 특징
		- 배열 크기 자동 조절
		- 현재 배열 크기보다 큰 인덱스를 사용하면 자동 증가
		- 하나의 배열에 여러 자료형 혼합 저장 가능
	- Array 메소드 : concat() -> 전달된 인수를 배열 끝에 추가
	- indexOf() : 요소 값을 가지고 인덱스를 찾을 때 사용.
	- join() : 배열 요소들을 하나의 문자열로 출력
	- filter() : 조건에 부합하는 요소만 선택하여 새로운 배열로 만들고 반환

4. 사용자 객체
	- 객체 리터럴부터 직접 생성
	- Object 객체 사용하여 생성
	- 객체 정의하고 new를 통해 객체 생성
	- class 키워드 이용 -> 객체 생성
	- 생성자 함수 사용 가능
	- 상속이 가능함. (키워드는 extends)
	- Prototype (상속 흉내내기)
	- ★★ 다형성

5. ★★ for/in 루프 : 객체 안 모든 속성들에 대해 어떤 처리를 반복하는 구조
	for ( 변수 in 객체(딕셔너리)) { 문장 }	ex) for (let k in myCar) { txt += myCar[k] + " "; }

※ ★ for in vs for of 
for in : index나 key값이 돌아오는 것, 객체에 사용 (객체 순회)
for of : 실제 값(value), 객체에 사용 불가 (배열 순회)

6. forEach문 : for loop를 간결하게 함수 형태로 사용한 방법, 주로 서버에서 데이터를 가져와 목록 생성할 때 씀.
	객체.forEach(function(){})

7. ★★★ Try-Catch 구조 (오류처리 최강자)
Try : 예외 발생할 수 있는 코드
Catch : 예외 처리 코드

8. throw 문장
	- 개발자가 오류 생성할 수 있도록 함.
	- 예외 발생시키는 것을 던진다(throw)라고 표현



Ⅱ. DOM(Document Object Model)
문서 객체 모델(DOM) : HTML문서의 계층 구조를 트리로 표현 ↔ 웹브라우저 객체(BOM)

※ id로 HTML 요소 찾기 : x = document.getElementById("main");	-> 문서 안에 id가 "main"인 요소를 찾아 반환
※ 태그 이름으로 HTML 요소 찾기 : array = document.getElementByTagName("p");	-> 문서 안의 <p>태그 모두 찾아서 반환
※ CSS 선택자로 HTML 요소 찾기 : let arr = document.querySelectorAll("p.special");

1. Truthy 값		->  true 반환
	※ true로 간주되는 모든 값
		- 비어 있지 않은 문자열
		- 0이 아닌 양 또는 음의 숫자
		- 객체 
		- true 불린 값
	↔ falsy (-> false 반환)	(빈 문자열, 숫자 0, null, undefined, NaN (Not a Number), false)

2. 텍스트 영역에서 읽기 : let s = document.getElementById('textArea').value
3. 체크 박스에서 읽기 : document.getElementById('myCheckBox').checked
4. 라디오 버튼에서 읽기 : let list = document.getElementsByName('color')
5. ★★ HTML 요소 변경하기	(DOM도 같이 변경된다.)
	- 요소 내용 변경하기	=> innerHTML (요소 시작태그와 종료 태그 사이에 놓인 모든 HTML 코드와 텍스트) 속성 사용
	- 요소 속성 변경하기
	- 요소 스타일 변경 : DOM과 자바스크립트 사용	=> 동적 변경 가능
	- ★★ 요소 클래스 변경 (요소 스타일 변경의 한계점 보완)
		※ JavaScript로 클래스 변경
			- className 지정	
				document.getElementById("myElement").className = "newClass";
				document.getElementById("myElement").className = "button active";	

			- classList.add 사용
				document.getElementById("myElement").classList.add("newClass");

			- classList.remove 사용하여 클래스 제거
				document.getElementById("myElement").classList.remove("existingClass");

			- classList.toggle 사용하여 클래스 토글
				document.getElementById("myElement").classList.toggle("active");

6. 새로운 HTML 요소 생성
	- 새로운 요소 생성	-> let node = document.createElement("p");
	- 문서 (DOM 트리) 내에서 추가할 위치 찾기	-> let parent = document.getElementById("target") ;
	- 새로운 요소를 기존 요소에 연결 ->  parent.appendChild(node);

7. 테이블에 새로운 행과 셀 추가
	- 새로운 행 추가	=>	insertRow() 사용

8. document.write() 메소드
	- 현재 작업 중인 DOM 트리에 주어진 콘텐츠 추가
	- ★ DOM 트리가 완전 생성 후 write() 호출하면 기존 DOM 모두 삭제



Ⅲ. DOM과 이벤트 처리, 입력 검증, BOM
1. 이벤트 처리 절차
버튼 클릭 -> 이벤트 발생 -> 등록된 함수 실행 -> 페이지 변화 발생

2. 이벤트 리스너 설정하기
- 인라인 방식 : HTML 요소 안에 코드 추가
- 객체의 이벤트 리스너 속성에 함수 대입
- 객체의 addEventListener() 함수 사용
- 익명 함수로 이벤트 리스너 작성

3. 이벤트 객체 : 해당 이벤트 관련 모든 정보를 포함한 객체
이벤트 리스너 : 이벤트 객체를 전달받음
- 이벤트 종류에 따라 객체가 달라짐.

4. ★★ 이벤트 객체의 상속구조
Object -> Event -> UIEvent -> MouseEvent -> DropEvent, WheelEvent

5. Event 객체의 속성 및 메소드 설명
type(string) : 이벤트 유형 	ex) "click", "mouseover"
target(object) : 이벤트가 발생한 요소 참조
currentTarget(object) : 이벤트 핸들러가 연결된 요소를 참조
bubbles(boolean) : 이벤트가 상위 요소로 전파되는지 여부를 나타냄
timeStamp(number) : 이벤트가 생성된 시각을 나타내는 타임스탬프, 페이지 로드 시간으로부터의 경과 시간
stopPropagation() : 이벤트 상위 요소 전파x ( = 버블링 또는 캡처링 중지)
preventDefault() : 이벤트 기본 동작 취소 (cancelable = true일 때만)	ex) 링크 클릭 시 페이지 이동 막음

6. 버블링(bubbling)과 캡처링(capturing)
버블링 : 안쪽 요소 이벤트  -> 바깥쪽 이벤트 처리 (default)
캡처링 : 바깥 요소 이벤트 -> 안쪽 요소 이벤트 처리

7. mouseover 이벤트
mouseover, mouseout 이벤트 : 사용자가 HTML 요소 위에 마우스 올리거나 요소 떠날 때 발생

8. mousedown, mouseup, mouseenter, onmousemove 이벤트
마우스 클릭 -> mousedown 이벤트
마우스 버튼 떼짐 -> mouseup 이벤트
요소 위로 마우스 포인터 이동 -> mouseenter 이벤트
마우스 좌표를 우리한테 전달 -> onmousemove 이벤트

9. ★★ load 이벤트
- HTML 문서 로딩되거나, 사용자가 웹페이지를 떠나면 각각 load와 unload 이벤트 발생
- load 이벤트는 대상 리소스(이미지, 스크립트, 프레임, 비디오 등) 또는 전체 페이지의 로딩이 완료됐을 때 발생
- javascript 코드에서 아직 생성되지 않은 이미지나 요소를 미리 사용하면 안됨.

※ 특징
- 완전한 로딩 : 문서의 모든 요소와 외부 리소스가 완전 로드 됐을때 발생
- 사용처 : 개별 요소 또는 전체 페이지에 사용가능
- 실행 시점 : 페이지 로드가 끝난 후 실행되므로, 모든 스크립트와 링크된 리소스 안전하게 사용가능

10. change 이벤트
- 입력 필드 검증할 때 종종 사용
- 사용자 입력 필드 내용 변경하면 toLowerCase() 함수 호출


11. 공백 검증 (필드가 비어있는지 체크하는 것 -> required 키워드 사용)
12. 정규식의 변수 -> Object (String 아님!)

13. ★★★ 이벤트 리스너 설정 총 정리
	13-1. 인라인 이벤트 핸들러 : HTML 요소 내에 직접 이벤트 핸들러 정의하는 방식
		장점 : HTML과 자바스크립트 코드 분리 X 빠르게 이벤트 추가
		단점 : 둘 다 관심사 분리(Separation of Concerns) 원칙 위배 ( 코드 복잡해져 개발이 어려움)

	13-2. 요소에 이벤트 핸들러 속성 적용
		장점 : ★HTML 코드와 자바스크립트 코드 분리 (관심 분리 원칙 반영, 두 코드 분리되어 유지보수 용이)
		단점 : 한 요소에 하나의 이벤트 핸들러만 설정할 수 있어, 여러 핸들러에 동시 할당 x

	13-3. addEventListener를 사용한 이벤트 리스너 추가
		장점 : ★HTML과 자바스크립트 코드 분리, 이벤트에 바인딩 가능
		단점 : DOM 완전 구성전에 이벤트 리스너가 등록되면 오류 발생

	13-4. DOMContentLoaded를 사용한 이벤트 리스너 등록 (DOM 요소 접근 가능, 모든 리소스 로드되는 것을 기다리지 않음)
		장점 : HTML 요소 안전접근 (오류 발생 감소), 초기 실행 성능 향상
		단점 : 외부 리소스 로드 전에 실행되므로 다루기 적합하지 않을 수 있음, 대규모 웹 애플리케이션에 적합, 사용자 인터페이스와 관련된 스크립트 초기화에 자주 사용

	13-5. load 이벤트 사용하여 이벤트 리스너 등록
		장점 : 이벤트 핸들링에 필요한 모든 요소 초기화 가능
		단점 : load 이벤트 사용하면 페이지 로딩 시간이 더 길어질 수 있음.

14. 브라우저 객체 모델 (BOM, Browser Object Model)
- 웹 브라우저가 가지고 있는 모든 객체
- 최상위 객체 : window, 그 아래로 navigator(브라우저 자체 정보), ★ location(현재URL 정보), history(방문 기록 정보), screen(사용자 화면 정보), document(HTML 문서 정보), frames(윈도우 포함 프레임정보) 객체가 있음.

15. ★★★ window 객체
- BOM의 최상위 객체, 웹브라우저 윈도우를 나타냄.
- 자바스크립트의 모든 전역 함수 = window 객체 메소드
- window.document.getElementById('myid') 형식으로 작성
- window. 을 생략
- setTimeout() : 일정 시간 후에 인수로 전달된 함수를 한 번만 호출 (단위 : 밀리초)
- setInterval() : 일정 시간마다 주기적으로 함수 호출, 반드시 개발자가 종료해야함. (단위 : 밀리초)
- moveTo() : 윈도우 이동 메소드, 절대적으로 위치 이동, moveBy() : 윈도우 이동 메소드, 상대적으로 위치이동

16. ★★ location 객체
protocol// hostname: port/ pathname / serach / hash



Ⅳ. 자바스크립트와 캔버스로 게임 만들기
1. canvas와 svg의 차이점
	※ canvas
		- HTML의 <canvas> 요소 사용하여 비트맵 기반 그래픽을 렌더링
		- 픽셀로 반환
		- 상호작용 많은 그래픽에 적합, 애플리케이션에 주로 사용
	※ SVG
		- XML 기반 벡터 그래픽 언어
		- 도형이나 이미지 확대 및 축소 가능, 품질 저하 x
		- 도형 크기 조정, 변형, 회전 등 용이
		- 개별 요소에 대한 접근 가능 (CSS 스타일링 및 JavaScript 조작이 가능)
- 둘다 웹에서 그래픽 표현하는 두가지 주요 기술
- 이미지나 그래픽 생성 및 조작에 사용하지만, 접근 방식, 사용사례 및 성능 측면에 서로 다름.
★★ 모든 그래픽은 context를 쓴다!

2. Canvas API : 캔버스 요소를 통해 그래픽 제공하는 라이브러리
- 직사각형 : rect() 함수 사용

3. 선그리기 속성
context.lineWidth : 선 두께 지정
context.strokeStyle : 선의 색상 지정
context.lineCap : 양쪽 끝점 모양 지정. butt, round, square 중 하나

4. 그라디언트 : createLinearGradient(x, y, x1, y1)
4-1. 원형 그라디언트 : createRadialGradient(x0, y0, r0, x1, y1, r1)  
회전 : context.rotate
신축 : context.scale



Ⅴ. 웹서버와 JSP 기초
1. 동적 웹페이지
- 사용자 입력 또는 시간에 따라 내용이 달라지는 웹페이지
	ex) 웹기반의 이메일, 게시판 ,블로그 ,방명록 등
- 모든 정보는 CRUD 제공
★★ CRUD : create read update delete

2. ★ 웹서버 구조
- 동시에 여러 사용자를 서비스해야한다.

	※ c기반 CGI(Common Gateway Interface) 프로그래밍의 문제점 : 다수 사용자 지원을 위해 프로세스를 생성해야 하므로 서버부하가 매우 큼.
	해결방안 : 쓰레드 기반 프로그래밍으로 해결한다.

3. 프로세스와 쓰레드
멀티프로그래밍 : 하나 CPU로 여러 작업 동시 처리, CPU는 빠르고 I/O는 늦다., QUEUE를 이용해 타임 쉐어링 사용
멀티 프로세싱 : 논리적으로 하나의 CPU, 물리적으로 여러개 cpu이므로 기존 프로그래밍 방식 사용
프로세스 : 하나 PC에 게임, 한글 브라우저가 동시 실행
쓰레드(Light Weight Process) : 하나 브라우저에 여러 개 파일 다운로드
※ 속도 차이 : 상황에 따라 다르지만 최소 10배이상 "쓰레드 > 프로세스"

4. 인터프리터 기반 서버 프로그래밍 : DeadLock 방지하기 위해 만들어짐, but 코어가 많아도 하나만 사용함.
5. 자바 서블릿(servlet(serv + ~let(작은 조각)), 서버에서 돌아가는 서버코드의 조각)
※ 특징
- 자바 언어 안에 HTML 코드를 넣어야 하는 어려운점이 있음.
- 네트워크 프로그램

6. JSP (Java Server Pages)	-> ASP(Active Server Pages)의 영향을 받음.
- 자바 기반 동적 웹 페이지를 구축한 서버-사이드 언어로 자바 서블릿 기반으로 함.
- 서블릿과 기능은 동일, 더 편리한 프로그램 작성 가능

7. 최종 웹 서버 구조 : WAS (Web Application Server, 동적 콘텐츠 처리(비즈니스 로직, DB연동) EX) spring Boot)
↔ 웹서버 (Web Server, 정적 콘텐츠 제공 (HTML, CSS, JS, 이미지 등) ex) Tomcat)

8. 실제적 웹 서버 구조
★ pc와 서버의 차이점 : 가격, 그래픽카드 유무
- MSA(Micro Service Architecture) : 모든 기능이 하나의 애플리케이션에 포함됨.

※ JSP 안에 자바 코드 추가 방법 : 스크립틀릿(scriptlet), 자바 수식(expression), 자바 선언(declaration)

9. 스크립틀릿 : <% code_block %>		->	자바코드 시작	코드 블록 가능	자바코드 종료
10. JSP vs 서블릿 차이
- 서블릿은 "자바 안의 HTML"
- JSP는 "HTML 안의 자바"

11. JSP 수식 : HTML 파일 안에 자바 수식 결과 추가, <%=... %> 형식 사용
12. JSP에서 자바 변수 선언 : <%!... %>
13. JSP 주석 : <%-- 주석 --%>
14. JSP 지시어 : <%@ page ... %>



Ⅵ. 모바일 웹페이지와 반응형 웹디자인(RWD, Responsive Web Design)
1. 반응형 웹디자인 3가지 기법
	- 미디어 쿼리 (media query) : 실제 화면 크기를 알 수 있고, 화면 레이아웃을 변경할 수 있음.
		portrait : 세로모드	landscape : 가로모드
	- 유동 레이아웃 (fluid layout) : 화면 레이아웃을 퍼센트(%)와 같은 상대적 수치를 사용한 것
	- 유동 이미지 (fluid image) : 이미지를 장치의 크기에 맞추는 기술

2. 중단점(breakpoint)
- 화면 크기에 따라 스타일이 달라지는 분기점
- 화면 크기에 맞는 여러 개의 레이아웃 지정 가능

3. 유동 레이아웃
- 웹 페이지나 뷰포트에 따라 자동 너비 조정되는 레이아웃
	※ 특징
		- 고정 픽셀 대신 백분율 단위로 크기 지정
		- 다양한 화면 크기에 유연하게 반응
		- 반응형 웹 디자인 (responsive design)의 기본 개념 중 하나
- flexbox나 grid 레이아웃을 주로 사용

4. Grid 레이아웃
- 가로 방향 행(row)과 세로 방향 열(column)으로 구성

5. fr(fraction) 단위
- 그리드 레이아웃에 사용되는 크기 단위
- 각 열의 너비를 "상대적"으로 정의할 때 편리

6. CSS Flexbox Layout
- float and flex
- Flex (1차원적) and Grid (2차원적)
- Flex vs inline-flex (필요한 만큼의 공간 차지)

7. ★ flex-direction Property (웹페이지 참고)
- 디폴트값 : class="flex-container (row)"
- class="flex-container column"

8. flex-wrap Property
- The flex-wrap Property
- The flex-nowrap Property

9. The justify-content Property : 정렬
- start : 왼쪽
- end : 오른쪽
- center : 중앙
- space-between, space-around, space-evenly

10. The align-items Property : 메인축, 교차축, 교차축 즉 상하정렬
flex-start, flex-end, center, baseline, stretch

11. The align-content Property : wrap가 되었을 때의 상하위치
flex-start, flex-end, center, space-between, space-around, stretch

12. ★★ 각 아이템의 flex 속성 지정
	12-1. flex-grow 속성
		- 기본값(0) : flex container 크기가 커져도 남은 공간 차지 x
		- 0이상 : 전체 합에서 비율대로 차지
	12-2. flex-shrink 속성
		- 기본값 : 1
		- 속성값 0이면 flex item 크기 감소 x
	12-3. flex-basis 속성
		- flex item의 기본 크기 결정 속성
		- 기본값 : auto (크기 지정 없으면 컨텐츠 크기)
		- 0이면 기본 크기 0, 남은 공간을 flex-grow 비율대로 설정
		- width 속성에 사용하는 모든 단위를 속성값에 사용가능

13. flex: 1 1 0 (=flex: 1)의 의미
- 3가지 flex-grow, flex-shrink, flex-basis 를 한번에 지징하며 설정
- flex: 1은 "여백을 다 채우라"라는 의미



Ⅶ. ★★★HTML5 웹스토리지, 파일API, AJAX
1. ★★ JSON(JavaScript Object Notation) : 자바스크립트 객체 리터럴을 지정하는 방법에서 유래, 객체 -> 텍스트, 텍스트 -> 객체로 만들 때 사용
2. JSON text와 object 사이의 변환
Parse : text -> object
Stringify : object -> text

3. 사용하는 곳
- 데이터 저장 : 텍스트로 객체 저장 형식, 스트링만 저장할 수 있는 저장소에 복잡 객체를 저장
- ☆ JSON은 텍스트 형식 데이터
- 데이터 교환하기 위한 가장 단순 형태
- 대부분 언어에서 기본 제공
- web coding

4. HTTP 프로토콜과 쿠키
- HTTP는 "무상태" 프로토콜(stateless(세션간 데이터 유지x) protocol)
※ 무상태로 설계한 이유 : 1. 초기 웹 목적이 문서 전송 중심이었음.	2. 서버입장에선 기억안해도 되는 구조.
※ 쿠키 특징
- 웹사이트는 자신의 쿠키만 읽을 수 있음.
- 단순 텍스트 데이터
- 웹 서버 -> 사용자 웹 브라우저로 보내는 데이터
- 크기는 4KB 초과 x

5. 세션ID
- 서버가 생성하여 웹 브라우저로 전달
- 서버는 클라이언트에 대한 정보 유지
- 사용자 관리가 편하고, 서버로의 모든 요청에 세션ID를 포함

6. JWT(JSON Web Tokens, 웹 표준)
- 로그인 정보 표준화하고 토큰에 안전 형태로 저장, 나머지 사용자 정보는 SPA에 관리
※ 구조
Header(헤더) : 토큰 타입(JWT)과 해시 알고리즘 지정
Payload(페이로드) : Registered claims(서버에 필요한 정보가 정의된 클레임), Public claims(충돌 방지 이름을 가진 클레임), Private claims(사용자 정의 클레임)
※ 장점 : 무상태로 인한 확장성, 보안성

7. HTML5 웹 스토리지
- 웹스토리지(web storage) : 클라이언트 컴퓨터 브라우저에 데이터 저장하는 메카니즘, 5MB까지 저장 가능, 키/값의 쌍으로 저장

8. 세션 스토리지와 로컬 스토리지
sessionStorage 객체 : 각 세션마다 데이터 별도 저장, 세션 종료 시 데이터 삭제
localStorage 객체 : 기한 없는 데이터를 웹브라우저 내부 저장소에 저장, 도메인 다르면 접근 불가

9. 파일 API
- 웹브라우저가 사용자 컴퓨터에 있는 로컬 파일들을 읽어올 수 있도록 해주는 API
- 사용자의 명시적 허가가 있어야 하며, 제한된 영역에서만 사용가능

10. ★★★ 비동기 프로그램
- 시간 오래 걸리는 작업을 수행하는 동안 다른 작업들도 계속할 수 있는 프로그래밍 방식, 주로 입출력 작업, 네트워크 통신 등에 유용
- 콜백함수 : 비동기 작업 완료되면 호출되는 함수, but 중첩 구조를 가질 수 있어 가독성이 떨어짐.
- 프라미스(promise) : 비동기 작업의 완료 또는 실패를 나타내는 객체
- async(비동기함수)와 await : 전자는 항상 프라미스를 반환, 후자는 프라미스 처리될 때까지 함수 일시 중지하고 프라미스가 완료되면 결과 값 반환 -> 가독성 향상

11. ★★★ AJAX(Asynchronous JavaScript and XML), 비동기 방식
- ★ 전체 페이지를 적재하지 않고 웹페이지 일부를 업데이트할 수 있는 것
- HTML5, CSS3, 자바스크립트, DOM, XML, XMLHttpRequest 개체 등 기술 사용

12. fetch API
- XMLHttpRequest (Callback) 개선 버전
- fetch는 Promise 사용 (Callback 회피 가능), aync/await로 변환 가능
- 서버로부터 리소스를 가져오기 위한 인터페이스

13. ★★★ MPA와 SPA
MPA(Multi Page App) : .html로 처리하는 방법 (단순 로직 작성이 어려움)
SPA(Single Page App) : AJAX를 사용하여 하나의 HTML로 처리하는 방법 (무조건 써야뒈)
※ SPA 장점 : 모든 정보 유지, 서버코드와 클라이언트 코드 분리, 개발 편리, 성능 높고 비용 저렴
※ 단점 : 대규모 서비스에서 모든 클라이언트의 기능을 한번에 다운로드해야 함.

14. REST(Representational State Transfer)
- 서버 API를 만드는 방법
※ 설계 원칙
- 따로 만들지 않고 HTTP 원래 제공 기능 최대한 사용
- 클라이언트-서버 구조
- Stateless(무상태성) : 이전 요청 상태 기억 x
- Cache(캐시) 기능 : 받은 응답 다시 요청x 재사용 가능
- Uniform Interface (일관된 인터페이트) : API 표준화
- Layered System (계층 구조) : 안전하고 유지보수 쉬움
- Self-descriptive(자체 설명 가능) : API가 응답만 보고 이해가능

15. ★★ 호출샘플 : 현재 로그인된 사용자(Access Token 소유자)를 가져오는 기능 수행
16. CORS(Cross-Origin Resource Sharing) : 개발 시 자주 발생하는 문제
	※ 동일 출처 정책(Same-Origin Policy)
		- 기본적으로 웹서버에 사용
		- 다른 출처의 웹페이지에서의 호출 허용하는 방법
		- 스킴(Scheme), 호스트(Host), 포트(Port)가 모두 같아야 "동일 출처"로 간주



Ⅷ. SVG, 드래그와 드롭
1. SVG(Scalable Vector Graphics) : 웹에서 벡터-기반의 그래픽 정의하는데 사용(표준)
※ 장점 : 크기변경되도 품질손상x, 애니메이션 가능, 생성 및 편집

2. SVG 애니메이션 : <rect> 요소 안에 <animate> 추가
attributeName : 애니메이션 변화 속성 지정
from : 속성 시작값 지정
to : 속성 끝나는 값 지정
dur : 애니메이션 지속 시간

3. 드래그와 드롭 
dragstart, drop, dragover, dragenter, drag 이벤트

4. HTML5 웹 워커(Web Worker)	(참고)
- 자바스크립트를 백그라운드 스레드에서 실행하는 기능
- 병렬 처리 가능
- 영상처리, 실시간 텍스트 처리, 로컬 DB 요청 병렬 처리
- 멀티코어 CPU 환경에서 여러 워커를 동시 실행해 성능 향상 가능
